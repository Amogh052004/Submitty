<div id="queue_history">
  <br>
  <h2>Today's History
    {% if viewer.getFullHistory() %}
      <a id="view_history_button" role="button" class="btn btn-default" href="{{base_url}}?full_history=false">
        View Limited History
      </a>
    {% else %}
      <a id="view_history_button" role="button" class="btn btn-default" href="{{base_url}}?full_history=true">
        View Full History
      </a>
    {% endif %}
  </h2>
  <table class="table table-striped" style="width:100%;">
    <thead>
      <tr>
        <th scope="col">#</th>
        <th scope="col">Name</th>
        <th scope="col">Queue</th>
        <th scope="col">Time Entered</th>
        <th scope="col">Time In Queue</th>
        <th scope="col">Time Helped</th>
        <th scope="col">Times Helped Today</th>
        <th scope="col">Times Helped this week</th>


      {#onclick="changeAnon('{{ gradeable.getId() }}')">
                    {{ anon_mode ? "Disable Anonymous Mode" : "Enable Anonymous Mode" }}}
       {# <th scope="col"> <a href ="#" onclick = "sortTable(8)">Helped Started By</a></th>#}

        <th scope="col">
            <a href="#" onclick="toggleSort('HelpStartedBy')">Helped Started By
                <span id="sortIndicator"></span>
            </a>
        </th>
        <th scope="col" class="mobile-hide">Removed By</th>

        {% if viewer.isGrader() %}
          <th scope="col">Restore</th>
        {% endif %}
      </tr>
    </thead>
    <tbody>
      {% set js_return_value = '<script>callPHP()</script>' %}
      {% set history_count = 0 %}
      {% for entry in viewer.getPastQueue(js_return_value) %}
        {% if (history_count < 25 or viewer.getFullHistory()) and (viewer.isGrader() or entry['user_id'] == viewer.getUserId()) %}
          {% set history_count = history_count + 1 %}
          <tr class="queue_history_{{entry['queue_code']}} queue_history_row">
            <th scope="row">{{history_count}}</th>
            <td>
              {{ entry['name'] }}
              <a onclick="unhideId(this, '{{ entry['user_id'] }}')" onkeypress="unhideId(this, '{{ entry['user_id'] }}')" title="Show user id" aria-label="Show user id" tabindex="0">
                <i class="fas fa-eye"></i>
              </a>
            </td>
            <td>{{ entry['queue_code'] }}</td>
            <td>{{ viewer.timeToHM(entry['time_in']) }}</td>

            <td>{{ viewer.getTimeWaitingInQueue(entry['time_out'],entry['time_help_start'],entry['time_in'],entry['removal_type']) }}</td>

            {% if entry['removal_type'] == 'helped' or entry['removal_type'] == 'self_helped' %}
              <td>{{viewer.getTimeBeingHelped(entry['time_out'],entry['time_help_start'])}}</td>
            {% elseif entry['removal_type'] == 'removed' %}
              <td>Removed</td>
            {% elseif entry['removal_type'] == 'self' %}
              <td>Left Queue</td>
            {% elseif entry['removal_type'] == 'emptied' %}
              <td>Queue Emptied</td>
            {% else %}
              <td>Not in queue</td>
            {% endif %}

            <td>{{ entry['helped_today'] }}</td>
            <td>{{ entry['times_helped'] }}</td>
            <td class="mobile-hide">{{ entry['help_started_by'] }}</td> 


            {% if entry['removal_type'] == 'self' %}
              <td class="mobile-hide"></td>
            {% else %}
              <td class="mobile-hide">{{ viewer.getRemoverName(entry) }}</td>
            {% endif %}
            {% if viewer.isGrader() %}
              <td>
                <form method="post" action="{{base_url}}/{{entry['queue_code'] | url_encode }}/restore" onsubmit="return confirm('Are you sure you want to restore {{ entry['name'] }} to the queue?');">
                  <input type="hidden" name="csrf_token" value="{{ csrf_token }}"/>
                  <input type="hidden" name="entry_id" value="{{entry['entry_id']}}"/>

                  <button type="submit" class="btn btn-danger queue_restore_btn">Restore</button>
                </form>
              </td>
            {% endif %}
          </tr>
        {% endif %}
      {% endfor %}
    </tbody>
  </table>
</div>

<script>

var sortStateTimeEntered = "off";

function toggleSort(column) {//per click actions handler
    var sortIndicator = document.getElementById("sortIndicator");
    
    if (column == 'HelpStartedBy') {
        if (sortStateTimeEntered == "off") {
            sortStateTimeEntered = "up";
            sortIndicator.innerText = "▲";
            Cookies.set('sortStateTimeEntered', 'up'); // Save to cookie
            loadThreadHandler();


            // Add logic for sorting 'Time Entered' in ascending order here
        } else if (sortStateTimeEntered == "up") {
            sortStateTimeEntered = "down";
            sortIndicator.innerText = "▼";
            Cookies.set('sortStateTimeEntered', 'down'); // Save to cookie
            loadThreadHandler();

            // Add logic for sorting 'Time Entered' in descending order here
        } else if (sortStateTimeEntered == "down") {
            sortStateTimeEntered = "off";
            sortIndicator.innerText = ""; // Reset to down arrow for off state
            Cookies.set('sortStateTimeEntered', 'off'); // Save to cookie
            loadThreadHandler();

            // Add logic for turning off sorting here
        }
    }
}

function callPHP(){
    console.log(Cookies.get('sortStateTimeEntered'))
    return Cookies.get('sortStateTimeEntered')
}

{#
function toggleSort(column) {
    var sortIndicator = document.getElementById("sortIndicator");
    
    if (column == 'HelpStartedBy') {
        if (sortStateTimeEntered == "off") {
            sortStateTimeEntered = "up";
            sortIndicator.innerText = "▲";
            // Add logic for sorting 'Time Entered' in ascending order here
        } else if (sortStateTimeEntered == "up") {
            sortStateTimeEntered = "down";
            sortIndicator.innerText = "▼";
            // Add logic for sorting 'Time Entered' in descending order here
        } else if (sortStateTimeEntered == "down") {
            sortStateTimeEntered = "off";
            sortIndicator.innerText = ""; // Reset to down arrow for off state
            // Add logic for turning off sorting here
        }
    }
}
{#
Cookies.set(`default_anon_mode_${gradeable_id}_override`, 'off');
function changeAnon(gradeable_id) {
    Cookies.set(`default_anon_mode_${gradeable_id}_override`, 'off');
    
    const status = {{ 
        if (anon_mode === true) {
            return 'up';
        } else if (anon_mode === false) {
            return 'down';
        } else {
            return 'off';
        }
    }};
    
    if (status === 'up') {
        Cookies.set(`anon_mode_${gradeable_id}`, 'up');
    } else if (status === 'down') {
        Cookies.set(`anon_mode_${gradeable_id}`, 'down');
    } else {
        Cookies.set(`anon_mode_${gradeable_id}`, 'off');
    }
    location.reload();
} #}
</script>